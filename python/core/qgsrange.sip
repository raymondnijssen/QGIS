/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsrange.h                                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




template <class T> class QgsRange
%Docstring
 A template based class for storing ranges (lower to upper values).

 QgsRange classes represent a range of values of some element type. For instance,
 ranges of int might be used to represent integer ranges.

 Ranges can indicate whether the upper and lower values are inclusive or exclusive.
 The inclusivity or exclusivity of bounds is considered when determining things like
 whether ranges overlap or during calculation of range intersections.

.. versionadded:: 3.0
.. seealso:: QgsDoubleRange
.. seealso:: QgsIntRange
.. note::

   not available in Python bindings
%End
{
  public:

    QgsRange( T lower, T upper, bool includeLower = true, bool includeUpper = true );
%Docstring
 Constructor for QgsRange. The ``lower`` and ``upper`` bounds are specified,
 and optionally whether or not these bounds are included in the range.
%End

    T lower() const;
%Docstring
 Returns the lower bound of the range.
.. seealso:: upper()
.. seealso:: includeLower()
 :rtype: T
%End

    T upper() const;
%Docstring
 Returns the upper bound of the range.
.. seealso:: lower()
.. seealso:: includeUpper()
 :rtype: T
%End

    bool includeLower() const;
%Docstring
 Returns true if the lower bound is inclusive, or false if the lower
 bound is exclusive.
.. seealso:: lower()
.. seealso:: includeUpper()
 :rtype: bool
%End

    bool includeUpper() const;
%Docstring
 Returns true if the upper bound is inclusive, or false if the upper
 bound is exclusive.
.. seealso:: upper()
.. seealso:: includeLower()
 :rtype: bool
%End

    bool isEmpty() const;
%Docstring
 Returns true if the range is empty, ie the lower bound equals (or exceeds) the upper bound
 and either the bounds are exclusive.
.. seealso:: isSingleton()
 :rtype: bool
%End

    bool isSingleton() const;
%Docstring
 Returns true if the range consists only of a single value or instant.
.. seealso:: isEmpty()
 :rtype: bool
%End

    bool contains( const QgsRange<T> &other ) const;
%Docstring
 Returns true if this range contains another range.
.. seealso:: overlaps()
 :rtype: bool
%End

    bool contains( T element ) const;
%Docstring
 Returns true if this range contains a specified ``element``.
 :rtype: bool
%End

    bool overlaps( const QgsRange<T> &other ) const;
%Docstring
 Returns true if this range overlaps another range.
.. seealso:: contains()
 :rtype: bool
%End


  public:

    QgsTemporalRange( const T &begin = T(), const T &end = T(), bool includeBeginning = true, bool includeEnd = true );
%Docstring
 Constructor for QgsTemporalRange. The ``begin`` and ``end`` are specified,
 and optionally whether or not these bounds are included in the range.
%End

    T begin() const;
%Docstring
 Returns the beginning of the range.
.. seealso:: end()
.. seealso:: includeBeginning()
 :rtype: T
%End

    T end() const;
%Docstring
 Returns the upper bound of the range.
.. seealso:: begin()
.. seealso:: includeEnd()
 :rtype: T
%End

    bool includeBeginning() const;
%Docstring
 Returns true if the beginning is inclusive, or false if the beginning
 is exclusive.
.. seealso:: begin()
.. seealso:: includeEnd()
 :rtype: bool
%End

    bool includeEnd() const;
%Docstring
 Returns true if the end is inclusive, or false if the end is exclusive.
.. seealso:: end()
.. seealso:: includeBeginning()
 :rtype: bool
%End

    bool isInstant() const;
%Docstring
 Returns true if the range consists only of a single instant.
.. seealso:: isEmpty()
.. seealso:: isInfinite()
 :rtype: bool
%End

    bool isInfinite() const;
%Docstring
 Returns true if the range consists of all possible values.
.. seealso:: isEmpty()
.. seealso:: isInstant()
 :rtype: bool
%End

    bool isEmpty() const;
%Docstring
 Returns true if the range is empty, ie the beginning equals (or exceeds) the end
 and either of the bounds are exclusive.
 A range with both invalid beginning and end is considered infinite and not empty.
 :rtype: bool
%End

    bool contains( const QgsTemporalRange<T> &other ) const;
%Docstring
 Returns true if this range contains another range.
 :rtype: bool
%End

    bool contains( const T &element ) const;
%Docstring
 Returns true if this range contains a specified ``element``.
 :rtype: bool
%End

    bool overlaps( const QgsTemporalRange<T> &other ) const;
%Docstring
 Returns true if this range overlaps another range.
 :rtype: bool
%End

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsrange.h                                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
